{"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DqTw3pSPnYdw","executionInfo":{"status":"ok","timestamp":1758989862322,"user_tz":180,"elapsed":24524,"user":{"displayName":"Mateus Almeida","userId":"01982828616956278499"}},"outputId":"897b708e-a64a-4f47-b12b-8f76805f333b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["%pip install category_encoders\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sSZt914cmrd-","executionInfo":{"status":"ok","timestamp":1758989901730,"user_tz":180,"elapsed":13483,"user":{"displayName":"Mateus Almeida","userId":"01982828616956278499"}},"outputId":"be2039b4-6718-43bd-f5cc-7df7de032814"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting category_encoders\n","  Downloading category_encoders-2.8.1-py3-none-any.whl.metadata (7.9 kB)\n","Requirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.12/dist-packages (from category_encoders) (2.0.2)\n","Requirement already satisfied: pandas>=1.0.5 in /usr/local/lib/python3.12/dist-packages (from category_encoders) (2.2.2)\n","Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.12/dist-packages (from category_encoders) (1.0.1)\n","Requirement already satisfied: scikit-learn>=1.6.0 in /usr/local/lib/python3.12/dist-packages (from category_encoders) (1.6.1)\n","Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.12/dist-packages (from category_encoders) (1.16.2)\n","Requirement already satisfied: statsmodels>=0.9.0 in /usr/local/lib/python3.12/dist-packages (from category_encoders) (0.14.5)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas>=1.0.5->category_encoders) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas>=1.0.5->category_encoders) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas>=1.0.5->category_encoders) (2025.2)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn>=1.6.0->category_encoders) (1.5.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn>=1.6.0->category_encoders) (3.6.0)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.12/dist-packages (from statsmodels>=0.9.0->category_encoders) (25.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas>=1.0.5->category_encoders) (1.17.0)\n","Downloading category_encoders-2.8.1-py3-none-any.whl (85 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m85.7/85.7 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: category_encoders\n","Successfully installed category_encoders-2.8.1\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RAFqvvw4lik2"},"outputs":[],"source":["import numpy             as np\n","import matplotlib.pyplot as plt\n","import pandas            as pd\n","import seaborn           as sns\n","from sklearn.pipeline import Pipeline\n","from sklearn.preprocessing import StandardScaler\n","from category_encoders import TargetEncoder\n","from sklearn.impute import SimpleImputer\n","from sklearn.compose import ColumnTransformer\n","from sklearn.model_selection import train_test_split\n","from xgboost import XGBClassifier\n","import lightgbm as lgb\n","from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import confusion_matrix, classification_report, roc_curve, roc_auc_score, accuracy_score, precision_score, recall_score, auc\n","from sklearn.linear_model import LogisticRegression"]},{"cell_type":"markdown","source":["Nesse trecho, o código define a função calculate_metrics, responsável por calcular e consolidar as principais métricas de desempenho de um modelo de classificação para os conjuntos de treino e teste.\n","\n","A função recebe o nome do modelo, o objeto do modelo treinado e os dados de entrada e saída (X e y). Em seguida, realiza as previsões (predict) e calcula métricas clássicas — acurácia, precisão, recall e AUC-ROC — usando as funções do sklearn. Também calcula duas métricas amplamente utilizadas em modelos de crédito:\n","\n","  - Índice Gini, que mede a capacidade discriminatória do modelo (derivado do AUC);\n","\n","  -Estatística KS (Kolmogorov-Smirnov), que avalia o poder de separação entre bons e maus pagadores.\n","\n","Essas métricas são calculadas separadamente para treino e teste, organizadas em um DataFrame comparativo com todas as informações reunidas. Assim, a função facilita a avaliação do desempenho e a detecção de possíveis problemas como overfitting."],"metadata":{"id":"qERu_YkU_FuB"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9HQnAyxlik7"},"outputs":[],"source":["# Métricas do modelo\n","\n","def calculate_metrics(nm_modelo, model, X_train, y_train, X_test, y_test):\n","    # Fazendo predições\n","    y_train_pred = model.predict(X_train)\n","    y_test_pred = model.predict(X_test)\n","\n","    # Calculando as métricas para o conjunto de treino\n","    accuracy_train = accuracy_score(y_train, y_train_pred)\n","    precision_train = precision_score(y_train, y_train_pred)\n","    recall_train = recall_score(y_train, y_train_pred)\n","    auc_roc_train = roc_auc_score(y_train, model.predict_proba(X_train)[:, 1])\n","\n","    # Calculando o Índice Gini e Estatística KS para o conjunto de treino\n","    probabilities_train = model.predict_proba(X_train)[:, 1]\n","    df_train = pd.DataFrame({'true_labels': y_train, 'predicted_probs': probabilities_train})\n","    df_train = df_train.sort_values(by='predicted_probs', ascending=False)\n","    df_train['cumulative_true'] = df_train['true_labels'].cumsum() / df_train['true_labels'].sum()\n","    df_train['cumulative_false'] = (1 - df_train['true_labels']).cumsum() / (1 - df_train['true_labels']).sum()\n","    ks_statistic_train = max(abs(df_train['cumulative_true'] - df_train['cumulative_false']))\n","    gini_index_train = 2 * auc_roc_train - 1\n","\n","    # Calculando as métricas para o conjunto de teste\n","    accuracy_test = accuracy_score(y_test, y_test_pred)\n","    precision_test = precision_score(y_test, y_test_pred)\n","    recall_test = recall_score(y_test, y_test_pred)\n","    auc_roc_test = roc_auc_score(y_test, model.predict_proba(X_test)[:, 1])\n","\n","    # Calculando o Índice Gini e Estatística KS para o conjunto de teste\n","    probabilities_test = model.predict_proba(X_test)[:, 1]\n","    df_test = pd.DataFrame({'true_labels': y_test, 'predicted_probs': probabilities_test})\n","    df_test = df_test.sort_values(by='predicted_probs', ascending=False)\n","    df_test['cumulative_true'] = df_test['true_labels'].cumsum() / df_test['true_labels'].sum()\n","    df_test['cumulative_false'] = (1 - df_test['true_labels']).cumsum() / (1 - df_test['true_labels']).sum()\n","    ks_statistic_test = max(abs(df_test['cumulative_true'] - df_test['cumulative_false']))\n","    gini_index_test = 2 * auc_roc_test - 1\n","\n","    # Criando o DataFrame com as métricas calculadas\n","    metrics_df = pd.DataFrame({\n","        'Algoritmo': [nm_modelo, nm_modelo],\n","        'Conjunto': ['Treino', 'Teste'],\n","        'Acuracia': [accuracy_train, accuracy_test],\n","        'Precisao': [precision_train, precision_test],\n","        'Recall': [recall_train, recall_test],\n","        'AUC_ROC': [auc_roc_train, auc_roc_test],\n","        'GINI': [gini_index_train, gini_index_test],\n","        'KS': [ks_statistic_train, ks_statistic_test]\n","    })\n","    return metrics_df"]},{"cell_type":"markdown","source":["Nesse trecho, o código define a função plot_metrics, que cria um painel visual completo para avaliar o desempenho de um modelo de classificação.\n","\n","A função recebe o modelo treinado, os conjuntos de treino e teste (X_train, y_train, X_test, y_test) e a lista de variáveis (features). Em seguida, gera um gráfico com oito subplots, cada um destacando um aspecto do desempenho do modelo:\n","\n","  - Taxa do Evento – mostra a proporção de eventos (positivos) e não eventos (negativos) no conjunto de treino.\n","\n","  - Importância das Variáveis – exibe as 10 variáveis mais relevantes segundo o modelo.\n","\n","  - Curva ROC – compara o desempenho nos conjuntos de treino e teste, com a AUC indicada na legenda.\n","\n","  - Índice Gini e Estatística KS – ilustra o poder discriminatório do modelo para ambos os conjuntos.\n","\n","  - Matrizes de Confusão – mostram os acertos e erros do modelo para treino e teste.\n","\n","  - Histogramas de Score – distribuem as probabilidades previstas (scores) em cada conjunto, evidenciando separação entre classes.\n","\n","Por fim, plt.tight_layout() organiza a disposição dos gráficos e plt.show() exibe o painel.\n"],"metadata":{"id":"an6XdcCp_pRK"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"s1X0onn4lik8"},"outputs":[],"source":["def plot_metrics(model, X_train, y_train, X_test, y_test, features):\n","    plt.figure(figsize=(15, 18))\n","\n","    # Gráfico de Barras para Taxa do Evento e Importância das Variáveis\n","    plt.subplot(4, 2, 1)\n","    event_rate = y_train.mean()\n","    non_event_rate = 1 - event_rate\n","    plt.barh(['Não Evento', 'Evento'], [non_event_rate, event_rate], color=['lightsteelblue', 'skyblue'])\n","    plt.xlabel('Taxa')\n","    plt.title('Taxa do Evento')\n","\n","    plt.subplot(4, 2, 2)\n","    importances = model.feature_importances_\n","    indices = np.argsort(importances)  # Ordem ascendente\n","    indices = indices[-10:]  # Considerando apenas as 10 mais importantes\n","    plt.barh(features[indices], importances[indices], color='skyblue')\n","    plt.xlabel('Importância')\n","    plt.title('Importância das Variáveis')\n","\n","    # Curva ROC para Treino e Teste\n","    plt.subplot(4, 2, 3)\n","    for X, y, label in [(X_train, y_train, 'Treino'), (X_test, y_test, 'Teste')]:\n","        fpr, tpr, _ = roc_curve(y, model.predict_proba(X)[:, 1])\n","        roc_auc = auc(fpr, tpr)\n","        plt.plot(fpr, tpr, label=f'{label} (AUC = {roc_auc:.2f})')\n","    plt.plot([0, 1], [0, 1], color='navy', linestyle='--')\n","    plt.xlabel('False Positive Rate')\n","    plt.ylabel('True Positive Rate')\n","    plt.title('Curva ROC')\n","    plt.legend(loc='lower right')\n","\n","    # Gráfico de Barras para Gini e KS\n","    plt.subplot(4, 2, 4)\n","    metrics = ['Índice Gini', 'Estatística KS']\n","    for X, y, label in [(X_train, y_train, 'Treino'), (X_test, y_test, 'Teste')]:\n","        probs = model.predict_proba(X)[:, 1]\n","        df = pd.DataFrame({'true_labels': y, 'predicted_probs': probs})\n","        df = df.sort_values(by='predicted_probs', ascending=False)\n","        df['cumulative_true'] = df['true_labels'].cumsum() / df['true_labels'].sum()\n","        df['cumulative_false'] = (1 - df['true_labels']).cumsum() / (1 - df['true_labels']).sum()\n","        ks = max(abs(df['cumulative_true'] - df['cumulative_false']))\n","        gini = 2 * auc(*roc_curve(y, probs)[:2]) - 1\n","        plt.bar([f'{label}\\n{metric}' for metric in metrics], [gini, ks], color='skyblue')\n","    plt.title('Índice Gini e Estatística KS')\n","\n","    # Matrizes de Confusão para Treino e Teste\n","    for i, (X, y, label) in enumerate([(X_train, y_train, 'Treino'), (X_test, y_test, 'Teste')], 5):\n","        plt.subplot(4, 2, i)\n","        conf_matrix = confusion_matrix(y, model.predict(X))\n","        sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar_kws={'label': 'Count'})\n","        plt.xlabel('Predicted Label')\n","        plt.ylabel('True Label')\n","        plt.title(f'Matriz de Confusão - {label}')\n","\n","    # Histograma do Score para Treino e Teste\n","    plt.subplot(4, 2, 7)\n","    plt.hist(model.predict_proba(X_train)[:, 1], bins=30, color='skyblue', edgecolor='black', alpha=0.7, label='Treino')\n","    plt.xlabel('Score')\n","    plt.ylabel('Frequência')\n","    plt.title('Histograma do Score - Treino')\n","    plt.legend(loc='upper right')\n","\n","    plt.subplot(4, 2, 8)\n","    plt.hist(model.predict_proba(X_test)[:, 1], bins=30, color='lightsteelblue', edgecolor='black', alpha=0.7, label='Teste')\n","    plt.xlabel('Score')\n","    plt.ylabel('Frequência')\n","    plt.title('Histograma do Score - Teste')\n","    plt.legend(loc='upper right')\n","\n","    plt.tight_layout()\n","    plt.show()"]},{"cell_type":"markdown","source":["Nesse trecho, o código lê dois conjuntos de dados em formato CSV: application_train.csv, que contém os registros utilizados para treinar o modelo (incluindo a variável-alvo TARGET), e application_test.csv, que reúne os dados novos ou desconhecidos usados para testar o modelo e avaliar seu desempenho. Ambos são carregados em DataFrames do pandas (df_train e df_test), servindo como base inicial para todo o processo de preparação, análise e modelagem de crédito."],"metadata":{"id":"sLcmZwFT_8nq"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"MZCW__JClik9"},"outputs":[],"source":["df_train = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Projetos/Modelo_Credito_Application /Conjunto_de_Dados/application_train.csv')\n","df_test = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Projetos/Modelo_Credito_Application /Conjunto_de_Dados/application_test.csv')"]},{"cell_type":"markdown","source":["Nesta etapa, é feito o pré-processamento dos dados para preparar o conjunto de treino, teste e produção antes da modelagem.\n","\n","Primeiro, ele separa as variáveis preditoras (X) da variável-alvo (y) e divide os dados em treino e teste (80%/20%) com train_test_split. Em seguida, identifica os atributos categóricos e numéricos do conjunto de treino.\n","\n","Para cada tipo de dado, é criado um pipeline de transformação:\n","\n","  - O cat_pipe trata valores ausentes com a moda (most_frequent) e aplica Target Encoding para converter categorias em valores numéricos baseados na média da variável-alvo.\n","\n","  - O num_pipe substitui valores nulos pela mediana e padroniza os dados com StandardScaler.\n","\n","Esses dois fluxos são combinados em um ColumnTransformer, garantindo que cada tipo de variável receba o tratamento adequado. O pipeline é então ajustado e aplicado aos dados de treino e teste, gerando versões processadas (X_train_processed e X_test_processed).\n","\n","Por fim, os dados transformados são concatenados (X_processed) e o mesmo pré-processamento é aplicado ao conjunto de produção (X_prod_processed), garantindo consistência entre treino, teste e dados reais usados posteriormente no modelo."],"metadata":{"id":"mbAR5b8i__QN"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"V9bx0MzXlik9"},"outputs":[],"source":["X = df_train.drop(columns=['TARGET'])\n","y = df_train['TARGET']\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n","\n","cat_attributes = X_train.select_dtypes(include='object')\n","num_attributes = X_train.select_dtypes(exclude='object')\n","\n","# Define categorical pipeline\n","cat_pipe = Pipeline([\n","    ('imputer', SimpleImputer(strategy='most_frequent')),\n","    ('encoder', TargetEncoder())\n","])\n","\n","# Define numerical pipeline\n","num_pipe = Pipeline([\n","    ('imputer', SimpleImputer(strategy='median')),\n","    ('scaler',StandardScaler())\n","])\n","\n","# Combine categorical and numerical pipelines\n","preprocessor = ColumnTransformer([\n","    ('cat', cat_pipe, cat_attributes.columns),\n","    ('num', num_pipe, num_attributes.columns)\n","])\n","preprocesssor = Pipeline(steps=[(\"preprocessor\", preprocessor)])\n","\n","X_train_processed = pd.DataFrame(preprocesssor.fit_transform(X_train, y_train),columns=X_train.columns)\n","X_test_processed = pd.DataFrame(preprocesssor.transform(X_test),columns=X_test.columns)\n","\n","X_processed = pd.concat([X_train_processed,X_test_processed],axis=0)\n","\n","X_prod_processed = pd.DataFrame(preprocesssor.transform(df_test),columns=df_test.columns)"]},{"cell_type":"markdown","source":["Nesta etapa, foram feitos testes comparativos entre diferentes algoritmos de machine learning para identificar qual apresenta melhor desempenho na modelagem de crédito.\n","\n","Primeiro, é criada uma lista chamada algoritmos com seis modelos:\n","\n","  - DecisionTreeClassifier (árvore de decisão)\n","\n","  - LogisticRegression (regressão logística)\n","\n","  - RandomForestClassifier (floresta aleatória)\n","\n","  - GradientBoostingClassifier (boosting sequencial)\n","\n","  - XGBClassifier (XGBoost)\n","\n","  - LGBMClassifier (LightGBM)\n","\n","Em seguida, o código percorre cada modelo na lista:\n","\n","  - Extrai o nome do algoritmo para identificação nos resultados;\n","\n","  - Treina o modelo com os dados processados (X_train_processed, y_train);\n","\n","  - Avalia o desempenho chamando a função calculate_metrics, que calcula métricas como acurácia, precisão, recall, AUC-ROC, Gini e KS tanto para treino quanto para teste;\n","\n","Exibe as métricas obtidas para cada algoritmo."],"metadata":{"id":"QKq6KGZgAeQ6"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":739},"id":"5Qx4iBcKlik_","executionInfo":{"status":"ok","timestamp":1758992047772,"user_tz":180,"elapsed":2044943,"user":{"displayName":"Mateus Almeida","userId":"01982828616956278499"}},"outputId":"11bde642-afd6-4e1d-8798-d200129473bc"},"outputs":[{"output_type":"display_data","data":{"text/plain":["                Algoritmo Conjunto  Acuracia  Precisao    Recall   AUC_ROC  \\\n","0  DecisionTreeClassifier   Treino  1.000000  1.000000  1.000000  1.000000   \n","1  DecisionTreeClassifier    Teste  0.850669  0.140879  0.167051  0.538844   \n","\n","       GINI        KS  \n","0  1.000000  1.000000  \n","1  0.077687  0.077975  "],"text/html":["\n","  <div id=\"df-cb8390f2-d951-433e-a17d-ad7f00f7990a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Algoritmo</th>\n","      <th>Conjunto</th>\n","      <th>Acuracia</th>\n","      <th>Precisao</th>\n","      <th>Recall</th>\n","      <th>AUC_ROC</th>\n","      <th>GINI</th>\n","      <th>KS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>DecisionTreeClassifier</td>\n","      <td>Treino</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>DecisionTreeClassifier</td>\n","      <td>Teste</td>\n","      <td>0.850669</td>\n","      <td>0.140879</td>\n","      <td>0.167051</td>\n","      <td>0.538844</td>\n","      <td>0.077687</td>\n","      <td>0.077975</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb8390f2-d951-433e-a17d-ad7f00f7990a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cb8390f2-d951-433e-a17d-ad7f00f7990a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cb8390f2-d951-433e-a17d-ad7f00f7990a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-e6b70dbd-c280-47fa-b7fb-40f7977d2197\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e6b70dbd-c280-47fa-b7fb-40f7977d2197')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-e6b70dbd-c280-47fa-b7fb-40f7977d2197 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_fc386dd9-2aeb-4beb-93b2-71990fd9f97e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metricas')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_fc386dd9-2aeb-4beb-93b2-71990fd9f97e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('metricas');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metricas","summary":"{\n  \"name\": \"metricas\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Algoritmo\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"DecisionTreeClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Conjunto\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Teste\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acuracia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1055929921083414,\n        \"min\": 0.8506689584688284,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.8506689584688284\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precisao\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6074900862416368,\n        \"min\": 0.14087928102987612,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.14087928102987612\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5889841046058455,\n        \"min\": 0.16705069124423963,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.16705069124423963\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AUC_ROC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.32608675524704633,\n        \"min\": 0.5388436882193911,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.5388436882193911\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GINI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6521735104940927,\n        \"min\": 0.07768737643878221,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.07768737643878221\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6519698507068844,\n        \"min\": 0.07797539487196205,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.07797539487196205\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["            Algoritmo Conjunto  Acuracia  Precisao    Recall   AUC_ROC  \\\n","0  LogisticRegression   Treino  0.919073  0.507407  0.009828  0.746401   \n","1  LogisticRegression    Teste  0.919655  0.606557  0.010657  0.747015   \n","\n","       GINI        KS  \n","0  0.492801  0.366777  \n","1  0.494030  0.369214  "],"text/html":["\n","  <div id=\"df-e1dfdc3e-6b0d-4499-b190-a0a0ad7b35bb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Algoritmo</th>\n","      <th>Conjunto</th>\n","      <th>Acuracia</th>\n","      <th>Precisao</th>\n","      <th>Recall</th>\n","      <th>AUC_ROC</th>\n","      <th>GINI</th>\n","      <th>KS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LogisticRegression</td>\n","      <td>Treino</td>\n","      <td>0.919073</td>\n","      <td>0.507407</td>\n","      <td>0.009828</td>\n","      <td>0.746401</td>\n","      <td>0.492801</td>\n","      <td>0.366777</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>LogisticRegression</td>\n","      <td>Teste</td>\n","      <td>0.919655</td>\n","      <td>0.606557</td>\n","      <td>0.010657</td>\n","      <td>0.747015</td>\n","      <td>0.494030</td>\n","      <td>0.369214</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e1dfdc3e-6b0d-4499-b190-a0a0ad7b35bb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e1dfdc3e-6b0d-4499-b190-a0a0ad7b35bb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e1dfdc3e-6b0d-4499-b190-a0a0ad7b35bb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-53b85754-49da-46e5-ab1a-5cf1fe6fd96a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-53b85754-49da-46e5-ab1a-5cf1fe6fd96a')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-53b85754-49da-46e5-ab1a-5cf1fe6fd96a button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_dbcd4ff7-e45b-4c46-8ba3-129cb528d6a5\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metricas')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_dbcd4ff7-e45b-4c46-8ba3-129cb528d6a5 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('metricas');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metricas","summary":"{\n  \"name\": \"metricas\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Algoritmo\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"LogisticRegression\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Conjunto\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Teste\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acuracia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.000411608925199985,\n        \"min\": 0.9190731976423449,\n        \"max\": 0.9196553005667565,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9196553005667565\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precisao\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07010961588813795,\n        \"min\": 0.5074074074074074,\n        \"max\": 0.6065573770491803,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.6065573770491803\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0005860843632453673,\n        \"min\": 0.009827833572453372,\n        \"max\": 0.01065668202764977,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.01065668202764977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AUC_ROC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00043448324215559304,\n        \"min\": 0.7464006421679563,\n        \"max\": 0.7470150942616366,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.7470150942616366\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GINI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0008689664843111861,\n        \"min\": 0.49280128433591264,\n        \"max\": 0.4940301885232732,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.4940301885232732\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0017228521966736875,\n        \"min\": 0.3667773902813875,\n        \"max\": 0.3692138712238877,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.3692138712238877\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["                Algoritmo Conjunto  Acuracia  Precisao    Recall   AUC_ROC  \\\n","0  RandomForestClassifier   Treino  0.999954       1.0  0.999426  1.000000   \n","1  RandomForestClassifier    Teste  0.919400       1.0  0.000576  0.695092   \n","\n","       GINI        KS  \n","0  1.000000  1.000000  \n","1  0.390184  0.296349  "],"text/html":["\n","  <div id=\"df-bab52d78-c9fc-4a34-8091-77337045ce97\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Algoritmo</th>\n","      <th>Conjunto</th>\n","      <th>Acuracia</th>\n","      <th>Precisao</th>\n","      <th>Recall</th>\n","      <th>AUC_ROC</th>\n","      <th>GINI</th>\n","      <th>KS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>RandomForestClassifier</td>\n","      <td>Treino</td>\n","      <td>0.999954</td>\n","      <td>1.0</td>\n","      <td>0.999426</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>RandomForestClassifier</td>\n","      <td>Teste</td>\n","      <td>0.919400</td>\n","      <td>1.0</td>\n","      <td>0.000576</td>\n","      <td>0.695092</td>\n","      <td>0.390184</td>\n","      <td>0.296349</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bab52d78-c9fc-4a34-8091-77337045ce97')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bab52d78-c9fc-4a34-8091-77337045ce97 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bab52d78-c9fc-4a34-8091-77337045ce97');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-c01f6251-caa2-4ece-af4e-98de8045cac2\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c01f6251-caa2-4ece-af4e-98de8045cac2')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-c01f6251-caa2-4ece-af4e-98de8045cac2 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_d5ce6a2e-ad96-4024-a9de-4ef3816a58bd\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metricas')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d5ce6a2e-ad96-4024-a9de-4ef3816a58bd button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('metricas');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metricas","summary":"{\n  \"name\": \"metricas\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Algoritmo\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"RandomForestClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Conjunto\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Teste\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acuracia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05696010156363926,\n        \"min\": 0.9193997955960234,\n        \"max\": 0.9999535437414709,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9193997955960234\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precisao\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7062936614507617,\n        \"min\": 0.000576036866359447,\n        \"max\": 0.9994261119081779,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.000576036866359447\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AUC_ROC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21560246299268054,\n        \"min\": 0.6950920727547079,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.6950920727547079\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GINI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4312049259853611,\n        \"min\": 0.3901841455094157,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.3901841455094157\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.497556173224866,\n        \"min\": 0.29634931178293744,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.29634931178293744\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["                    Algoritmo Conjunto  Acuracia  Precisao    Recall  \\\n","0  GradientBoostingClassifier   Treino  0.919892  0.725857  0.016714   \n","1  GradientBoostingClassifier    Teste  0.919957  0.630000  0.018145   \n","\n","    AUC_ROC      GINI        KS  \n","0  0.764322  0.528644  0.393744  \n","1  0.753229  0.506457  0.377014  "],"text/html":["\n","  <div id=\"df-d1fe3acd-4cc7-4910-ad7b-5681fa2ec75b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Algoritmo</th>\n","      <th>Conjunto</th>\n","      <th>Acuracia</th>\n","      <th>Precisao</th>\n","      <th>Recall</th>\n","      <th>AUC_ROC</th>\n","      <th>GINI</th>\n","      <th>KS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>GradientBoostingClassifier</td>\n","      <td>Treino</td>\n","      <td>0.919892</td>\n","      <td>0.725857</td>\n","      <td>0.016714</td>\n","      <td>0.764322</td>\n","      <td>0.528644</td>\n","      <td>0.393744</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>GradientBoostingClassifier</td>\n","      <td>Teste</td>\n","      <td>0.919957</td>\n","      <td>0.630000</td>\n","      <td>0.018145</td>\n","      <td>0.753229</td>\n","      <td>0.506457</td>\n","      <td>0.377014</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d1fe3acd-4cc7-4910-ad7b-5681fa2ec75b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d1fe3acd-4cc7-4910-ad7b-5681fa2ec75b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d1fe3acd-4cc7-4910-ad7b-5681fa2ec75b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-639cc2f5-f3cf-41e1-bdc2-b3620162c863\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-639cc2f5-f3cf-41e1-bdc2-b3620162c863')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-639cc2f5-f3cf-41e1-bdc2-b3620162c863 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_3836a094-b515-49a3-9495-4e5157175ba3\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metricas')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_3836a094-b515-49a3-9495-4e5157175ba3 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('metricas');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metricas","summary":"{\n  \"name\": \"metricas\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Algoritmo\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"GradientBoostingClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Conjunto\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Teste\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acuracia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.615412376917099e-05,\n        \"min\": 0.9198919891989199,\n        \"max\": 0.9199572609867137,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9199572609867137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precisao\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0677809210501871,\n        \"min\": 0.63,\n        \"max\": 0.7258566978193146,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0010116368942208148,\n        \"min\": 0.01671449067431851,\n        \"max\": 0.018145161290322582,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.018145161290322582\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AUC_ROC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.007844140084907096,\n        \"min\": 0.7532286953681862,\n        \"max\": 0.7643219846614162,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.7532286953681862\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GINI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.015688280169814193,\n        \"min\": 0.5064573907363723,\n        \"max\": 0.5286439693228324,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.5064573907363723\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.011829872090547538,\n        \"min\": 0.37701429526153646,\n        \"max\": 0.39374426081312774,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.37701429526153646\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["       Algoritmo Conjunto  Acuracia  Precisao    Recall   AUC_ROC      GINI  \\\n","0  XGBClassifier   Treino  0.929357  0.912599  0.140818  0.913973  0.827945   \n","1  XGBClassifier    Teste  0.918331  0.432515  0.040611  0.736737  0.473473   \n","\n","         KS  \n","0  0.660844  \n","1  0.351594  "],"text/html":["\n","  <div id=\"df-98dca0a0-9dcc-45e7-b993-655bdd2cf538\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Algoritmo</th>\n","      <th>Conjunto</th>\n","      <th>Acuracia</th>\n","      <th>Precisao</th>\n","      <th>Recall</th>\n","      <th>AUC_ROC</th>\n","      <th>GINI</th>\n","      <th>KS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>XGBClassifier</td>\n","      <td>Treino</td>\n","      <td>0.929357</td>\n","      <td>0.912599</td>\n","      <td>0.140818</td>\n","      <td>0.913973</td>\n","      <td>0.827945</td>\n","      <td>0.660844</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>XGBClassifier</td>\n","      <td>Teste</td>\n","      <td>0.918331</td>\n","      <td>0.432515</td>\n","      <td>0.040611</td>\n","      <td>0.736737</td>\n","      <td>0.473473</td>\n","      <td>0.351594</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98dca0a0-9dcc-45e7-b993-655bdd2cf538')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-98dca0a0-9dcc-45e7-b993-655bdd2cf538 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-98dca0a0-9dcc-45e7-b993-655bdd2cf538');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-8ebdd96c-3611-4ca8-b19b-25f75d1983d5\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8ebdd96c-3611-4ca8-b19b-25f75d1983d5')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-8ebdd96c-3611-4ca8-b19b-25f75d1983d5 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_8c9b0f6b-c856-4777-8972-2352bc461079\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metricas')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_8c9b0f6b-c856-4777-8972-2352bc461079 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('metricas');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metricas","summary":"{\n  \"name\": \"metricas\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Algoritmo\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"XGBClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Conjunto\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Teste\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acuracia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.007796652431935747,\n        \"min\": 0.918331320263867,\n        \"max\": 0.9293574518742197,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.918331320263867\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precisao\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3394702657432948,\n        \"min\": 0.4325153374233129,\n        \"max\": 0.9125987912598791,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.4325153374233129\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07085718459972526,\n        \"min\": 0.04061059907834101,\n        \"max\": 0.14081779053084648,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.04061059907834101\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AUC_ROC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12532481668577217,\n        \"min\": 0.7367366892986962,\n        \"max\": 0.9139727447576371,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.7367366892986962\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GINI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.25064963337154433,\n        \"min\": 0.47347337859739236,\n        \"max\": 0.8279454895152742,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.47347337859739236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21867284250669763,\n        \"min\": 0.35159375050938074,\n        \"max\": 0.6608438501050283,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.35159375050938074\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["[LightGBM] [Info] Number of positive: 13940, number of negative: 158265\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.206807 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 24092\n","[LightGBM] [Info] Number of data points in the train set: 172205, number of used features: 166\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.080950 -> initscore=-2.429508\n","[LightGBM] [Info] Start training from score -2.429508\n"]},{"output_type":"display_data","data":{"text/plain":["        Algoritmo Conjunto  Acuracia  Precisao    Recall   AUC_ROC      GINI  \\\n","0  LGBMClassifier   Treino  0.920891  0.828157  0.028694  0.826040  0.652080   \n","1  LGBMClassifier    Teste  0.919446  0.519231  0.015553  0.751715  0.503431   \n","\n","         KS  \n","0  0.493750  \n","1  0.369103  "],"text/html":["\n","  <div id=\"df-a6df0955-327b-437e-8544-0659d267cfde\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Algoritmo</th>\n","      <th>Conjunto</th>\n","      <th>Acuracia</th>\n","      <th>Precisao</th>\n","      <th>Recall</th>\n","      <th>AUC_ROC</th>\n","      <th>GINI</th>\n","      <th>KS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LGBMClassifier</td>\n","      <td>Treino</td>\n","      <td>0.920891</td>\n","      <td>0.828157</td>\n","      <td>0.028694</td>\n","      <td>0.826040</td>\n","      <td>0.652080</td>\n","      <td>0.493750</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>LGBMClassifier</td>\n","      <td>Teste</td>\n","      <td>0.919446</td>\n","      <td>0.519231</td>\n","      <td>0.015553</td>\n","      <td>0.751715</td>\n","      <td>0.503431</td>\n","      <td>0.369103</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a6df0955-327b-437e-8544-0659d267cfde')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a6df0955-327b-437e-8544-0659d267cfde button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a6df0955-327b-437e-8544-0659d267cfde');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-9bf857fa-3d53-4756-a9d6-6e828df5e346\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9bf857fa-3d53-4756-a9d6-6e828df5e346')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-9bf857fa-3d53-4756-a9d6-6e828df5e346 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_4eb88218-24dd-4fb9-b556-49994aae32a7\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metricas')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4eb88218-24dd-4fb9-b556-49994aae32a7 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('metricas');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metricas","summary":"{\n  \"name\": \"metricas\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Algoritmo\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"LGBMClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Conjunto\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Teste\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acuracia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0010214494829362958,\n        \"min\": 0.9194462510452476,\n        \"max\": 0.9208907987572951,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9194462510452476\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precisao\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2184440800774973,\n        \"min\": 0.5192307692307693,\n        \"max\": 0.8281573498964804,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.5192307692307693\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.009292379559242782,\n        \"min\": 0.01555299539170507,\n        \"max\": 0.028694404591104734,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.01555299539170507\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AUC_ROC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.052555245732612166,\n        \"min\": 0.7517154270182539,\n        \"max\": 0.8260397683071647,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.7517154270182539\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GINI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10511049146522433,\n        \"min\": 0.5034308540365078,\n        \"max\": 0.6520795366143295,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.5034308540365078\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08813902579460399,\n        \"min\": 0.3691027680041356,\n        \"max\": 0.49375017365721663,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.3691027680041356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}],"source":["# Testar outros modelos\n","\n","algoritmos = [DecisionTreeClassifier(criterion='gini',random_state=0),\n","              LogisticRegression(solver='liblinear',random_state=0),\n","              RandomForestClassifier(random_state=0),\n","              GradientBoostingClassifier(random_state=0),\n","              XGBClassifier(random_state=0),\n","              lgb.LGBMClassifier(random_state=0)]\n","\n","for algoritmo in algoritmos:\n","\n","    nome_algoritmo = str(algoritmo)[:str(algoritmo).find(\"(\")]\n","    # Treino do modelo\n","    algoritmo.fit(X_train_processed,y_train)\n","\n","    # Avaliar modelo\n","    metricas = calculate_metrics(nome_algoritmo,algoritmo, X_train_processed, y_train, X_test_processed, y_test)\n","    display(metricas)"]},{"cell_type":"markdown","source":["Nesse trecho, o código executa o treinamento e avaliação de um único modelo, o LightGBM (LGBMClassifier), que é um algoritmo de gradient boosting otimizado para alto desempenho em grandes volumes de dados.\n","\n","O modelo é criado com uma semente fixa (random_state=0) para garantir reprodutibilidade. Em seguida:\n","\n","  - O nome do algoritmo é extraído para identificação nos resultados;\n","\n","  - O modelo é treinado com os dados pré-processados de treino (X_train_processed, y_train);\n","\n","  - A função calculate_metrics é chamada para avaliar o desempenho nos conjuntos de treino e teste, retornando métricas como acurácia, precisão, recall, AUC-ROC, Gini e KS;\n","\n","Os resultados são exibidos com display(metricas)."],"metadata":{"id":"y2BwuQWLAyJv"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":264},"id":"eH9EiKPIlik_","executionInfo":{"status":"ok","timestamp":1758992125630,"user_tz":180,"elapsed":28591,"user":{"displayName":"Mateus Almeida","userId":"01982828616956278499"}},"outputId":"730c673b-b17d-4999-c595-863bf59d3aba"},"outputs":[{"output_type":"stream","name":"stdout","text":["[LightGBM] [Info] Number of positive: 13940, number of negative: 158265\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.307472 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 24092\n","[LightGBM] [Info] Number of data points in the train set: 172205, number of used features: 166\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.080950 -> initscore=-2.429508\n","[LightGBM] [Info] Start training from score -2.429508\n"]},{"output_type":"display_data","data":{"text/plain":["        Algoritmo Conjunto  Acuracia  Precisao    Recall   AUC_ROC      GINI  \\\n","0  LGBMClassifier   Treino  0.920891  0.828157  0.028694  0.826040  0.652080   \n","1  LGBMClassifier    Teste  0.919446  0.519231  0.015553  0.751715  0.503431   \n","\n","         KS  \n","0  0.493750  \n","1  0.369103  "],"text/html":["\n","  <div id=\"df-ac168c4f-fa6a-4e66-b2d9-ab04dfd59ca7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Algoritmo</th>\n","      <th>Conjunto</th>\n","      <th>Acuracia</th>\n","      <th>Precisao</th>\n","      <th>Recall</th>\n","      <th>AUC_ROC</th>\n","      <th>GINI</th>\n","      <th>KS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LGBMClassifier</td>\n","      <td>Treino</td>\n","      <td>0.920891</td>\n","      <td>0.828157</td>\n","      <td>0.028694</td>\n","      <td>0.826040</td>\n","      <td>0.652080</td>\n","      <td>0.493750</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>LGBMClassifier</td>\n","      <td>Teste</td>\n","      <td>0.919446</td>\n","      <td>0.519231</td>\n","      <td>0.015553</td>\n","      <td>0.751715</td>\n","      <td>0.503431</td>\n","      <td>0.369103</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ac168c4f-fa6a-4e66-b2d9-ab04dfd59ca7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ac168c4f-fa6a-4e66-b2d9-ab04dfd59ca7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ac168c4f-fa6a-4e66-b2d9-ab04dfd59ca7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-eeb14328-ec03-47ec-a118-34b01fc9292a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eeb14328-ec03-47ec-a118-34b01fc9292a')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-eeb14328-ec03-47ec-a118-34b01fc9292a button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_7f454c31-67a7-4f9e-b682-d7dd24fb2019\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metricas')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7f454c31-67a7-4f9e-b682-d7dd24fb2019 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('metricas');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metricas","summary":"{\n  \"name\": \"metricas\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Algoritmo\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"LGBMClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Conjunto\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Teste\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acuracia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0010214494829362958,\n        \"min\": 0.9194462510452476,\n        \"max\": 0.9208907987572951,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9194462510452476\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precisao\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2184440800774973,\n        \"min\": 0.5192307692307693,\n        \"max\": 0.8281573498964804,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.5192307692307693\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.009292379559242782,\n        \"min\": 0.01555299539170507,\n        \"max\": 0.028694404591104734,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.01555299539170507\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AUC_ROC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.052555245732612166,\n        \"min\": 0.7517154270182539,\n        \"max\": 0.8260397683071647,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.7517154270182539\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GINI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10511049146522433,\n        \"min\": 0.5034308540365078,\n        \"max\": 0.6520795366143295,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.5034308540365078\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08813902579460399,\n        \"min\": 0.3691027680041356,\n        \"max\": 0.49375017365721663,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.3691027680041356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}],"source":["algoritmos = [lgb.LGBMClassifier(random_state=0)]\n","\n","for algoritmo in algoritmos:\n","\n","    nome_algoritmo = str(algoritmo)[:str(algoritmo).find(\"(\")]\n","    # Treino do modelo\n","    algoritmo.fit(X_train_processed,y_train)\n","\n","    # Avaliar modelo\n","    metricas = calculate_metrics(nome_algoritmo,algoritmo, X_train_processed, y_train, X_test_processed, y_test)\n","    display(metricas)"]},{"cell_type":"markdown","source":["Nesse trecho, o código gera o arquivo de submissão final com as previsões do modelo para os dados de produção. Primeiro, ele utiliza o método predict_proba do modelo treinado para obter as probabilidades da classe positiva, armazenando o resultado em y_predict_proba_prod. Em seguida, cria o DataFrame df_submission contendo duas colunas: ID, que representa o identificador do cliente (SK_ID_CURR), e TARGET, que corresponde à probabilidade prevista de inadimplência. Por fim, o arquivo é salvo em formato CSV como submission_baseline_v1.csv, pronto para ser utilizado em análises ou submetido a competições de modelagem. É importante observar que o código deve usar a coluna SK_ID_CURR do DataFrame original de teste (df_test['SK_ID_CURR']), pois o objeto X_prod_processed não contém essa coluna."],"metadata":{"id":"Zq7KcAoRBD5h"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"GR_xWGD3lilA"},"outputs":[],"source":["y_predict_proba_prod = algoritmo.predict_proba(X_prod_processed)[:,1]\n","df_submission = pd.DataFrame(X_prod_processed.SK_ID_CURR,columns=['ID'])\n","df_submission['TARGET'] = y_predict_proba_prod\n","\n","df_submission.to_csv('submission_baseline_v1.csv', index=False)"]},{"cell_type":"markdown","source":["Nesse trecho, o código salva o modelo treinado em um arquivo usando a biblioteca pickle, que permite armazenar objetos Python de forma serializada. O comando with open('baseline_lgbm_v1.pkl', 'wb') as file: cria (ou sobrescreve) o arquivo baseline_lgbm_v1.pkl em modo de escrita binária, e em seguida o método pickle.dump(algoritmo, file) grava o objeto do modelo (algoritmo, no caso o LightGBM treinado) dentro do arquivo. Esse procedimento é utilizado para preservar o modelo após o treinamento, permitindo que ele seja carregado posteriormente sem precisar ser reprocessado ou reentreinado."],"metadata":{"id":"jhL_IetOBPSO"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qe3PvAcRlilA"},"outputs":[],"source":["import pickle\n","\n","with open('baseline_lgbm_v1.pkl', 'wb') as file:\n","  pickle.dump(algoritmo, file)"]},{"cell_type":"markdown","source":["O comando copia o arquivo submission_baseline_v1.csv para o diretório indicado no Google Drive. O prefixo ! indica que a linha está executando um comando do sistema dentro do ambiente do Colab, e cp é o comando Unix usado para copiar arquivos. Dessa forma, o arquivo gerado com as previsões do modelo é transferido do ambiente temporário do Colab para a pasta permanente no Drive, garantindo que ele fique armazenado e acessível após o encerramento da sessão."],"metadata":{"id":"MEUoqsxkCVlz"}},{"cell_type":"code","source":["!cp submission_baseline_v1.csv \"/content/drive/MyDrive/Colab Notebooks/Projetos/Modelo_Credito_Application /Modelos\"\n"],"metadata":{"id":"EEw5_a4_GlqQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["O comando copia o arquivo baseline_lgbm_v1.pkl, que contém o modelo LightGBM salvo, para o diretório especificado no Google Drive. O uso de ! indica que é um comando de terminal executado dentro do Colab, e cp é o comando responsável pela cópia de arquivos no sistema Unix. Assim, o modelo treinado é transferido do ambiente temporário do Colab para uma pasta permanente no Drive, garantindo que ele fique armazenado para uso ou carregamento futuro sem necessidade de novo treinamento."],"metadata":{"id":"MIDybaf2CjUz"}},{"cell_type":"code","source":["!cp baseline_lgbm_v1.pkl \"/content/drive/MyDrive/Colab Notebooks/Projetos/Modelo_Credito_Application /Modelos\""],"metadata":{"id":"lOgkyWVzGyBZ"},"execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"base","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.15"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":0}
